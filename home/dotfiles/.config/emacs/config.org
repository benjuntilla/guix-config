Place customization variables outside of ~init.el~ for writability
(This is the only non-deterministic part of this configuration)
#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+end_src

Stuff to run when creating frame
#+begin_src emacs-lisp
(defun my/after-make-frame-commands ()
  ;; Disable mouse stuff
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  ;; Focus frame on creation
  (select-frame-set-input-focus (selected-frame)))

(add-hook 'server-after-make-frame-hook #'my/after-make-frame-commands)
#+end_src

Fix fonts when using daemon, as per https://stackoverflow.com/questions/3984730/emacs-gui-with-emacs-daemon-not-loading-fonts-correctly
#+begin_src emacs-lisp
(setq default-frame-alist '((font . "Iosevka") (foreground-color . "#bbc2cf")))
#+end_src
* ~general~
#+begin_src emacs-lisp
(use-package general)
#+end_src

Miscellaneous bindings
#+begin_src emacs-lisp
(general-def
  ;; cycle spacing
  "M-SPC" 'cycle-spacing
  ;; killing emacs
  "C-c q" 'save-buffers-kill-emacs
  ;; comment toggling
  "C-\\" 'comment-or-uncomment-region
  ;; reloading init file
  [f5] '(lambda () (interactive) (load-file user-init-file)))
#+end_src

Zooming in & out
#+begin_src emacs-lisp
(general-def
  [C-wheel-down] 'text-scale-decrease
  [C-wheel-up] 'text-scale-increase)
(general-def 'normal 'global
  "z i" 'text-scale-increase
  "z o" 'text-scale-decrease)
#+end_src

Clearing minibuffer
#+begin_src emacs-lisp
(general-def
  minibuffer-local-map
  "C-u" '(lambda () (interactive) (mark-whole-buffer) (call-interactively 'delete-region)))
#+end_src
* Helper vars & funcs
#+begin_src emacs-lisp
(setq org-root-dir "~/org"
      org-ref-dir (concat org-root-dir "/ref"))

(defun my/evil-select-pasted ()
  (interactive)
  (let ((start-marker (evil-get-marker ?\[))
        (end-marker (evil-get-marker ?\])))
        (evil-visual-select start-marker end-marker)))
;; stolen from https://hungyi.net/posts/copy-org-mode-url/
(defun my/org-yank-link ()
  (interactive)
  (let ((plain-url (url-get-url-at-point)))
    (if plain-url
        (progn
          (kill-new plain-url)
          (message (concat "Copied: " plain-url)))
      (let* ((link-info (assoc :link (org-context)))
             (text (when link-info
                     (buffer-substring-no-properties
                      (or (cadr link-info) (point-min))
                      (or (caddr link-info) (point-max))))))
        (if (not text)
            (error "Oops! Point isn't in an org link")
          (string-match org-link-bracket-re text)
          (let ((url (substring text (match-beginning 1) (match-end 1))))
            (kill-new url)
            (message (concat "Copied: " url))))))))
#+end_src
** set exec-path from path
#+begin_src emacs-lisp
(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match
that used by the user's shell.

This is particularly useful under Mac OS X and macOS, where GUI
apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string
              "[ \t\n]*$" "" (shell-command-to-string
                      "echo $PATH"
                            ))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(set-exec-path-from-shell-PATH)
#+end_src
* Behavior
Enhance Info
#+begin_src emacs-lisp
(use-package info+
  :general ('normal Info-mode-map
                    [remap Info-toc] 'Info-toc-outline)
  :config
  (set-face-attribute 'info-fixed-pitch nil :height 1.0)
  (Info-variable-pitch-text-mode)
  (Info-breadcrumbs-in-mode-line-mode -1))
#+end_src

Delete text when selecting and typing over it
#+begin_src emacs-lisp
(setq delete-selection-mode t)
#+end_src

Pinentry
#+begin_src emacs-lisp
(use-package pinentry
  :config (pinentry-start))
#+end_src

Set default browser to Firefox
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+end_src

Enable docs in minibuffer
#+begin_src emacs-lisp
(eldoc-mode)
#+end_src

Disable annoying bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

Change yes/no prompts to y/n
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Compile all site-lisp on demand
#+begin_src emacs-lisp
(setq native-comp-deferred-compilation t)
#+end_src

Delete old versions from native compilation cache
#+begin_src emacs-lisp
(setq native-compile-prune-cache t)
#+end_src

Silence native comp warnings & errors
#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors 'silent)
#+end_src

Save bookmarks every modification
#+begin_src emacs-lisp
(setq bookmark-save-flag 1)
#+end_src

Keep track of recent files
#+begin_src emacs-lisp
(recentf-mode)
#+end_src

Enable recursive minibuffers
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Trash instead of delete
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src

Automatically revert buffers whenever files are changed
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq auto-revert-interval 1)
#+end_src

Auto +x script files
#+begin_src emacs-lisp
(add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p)
#+end_src

Performance tweaks for ~lsp-mode~
[[https://emacs-lsp.github.io/lsp-mode/page/performance/]["Adjust gc-cons-threshold. The default setting is too low for lsp-mode's needs due to the fact that client/server communication generates a lot of memory/garbage."]]
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src
[[https://emacs-lsp.github.io/lsp-mode/page/performance/]["Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range."]]
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

Enable history
#+begin_src emacs-lisp
;; (setq savehist-file (concat user-emacs-directory "savehist"))
;; (savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src

Enable UTF-8 encoding
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

Backup & autosaving
#+begin_src emacs-lisp
(setq backup-by-copying t
      kept-new-versions 10
      kept-old-versions 0
      delete-old-versions t  ;; Don't ask to delete excess backup versions.
      backup-directory-alist (list (cons "." (concat user-emacs-directory "backups")))
      version-control t  ;; Use version numbers for backups.
      vc-make-backup-files t)  ;; Backup versioned files

(setq auto-save-file-name-transforms (list (list ".*" (concat user-emacs-directory "auto-save-list") t)))
#+end_src

Async
#+begin_src emacs-lisp
(use-package async
  :config
  (dired-async-mode)
  (async-bytecomp-package-mode))
#+end_src

Prefer newer package files
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src
* Meta Emacs Stuff
Use ~proced~ for listing processes
#+begin_src emacs-lisp
(use-package proced
  :commands proced
  :custom
  (proced-auto-update-flag t)
  (proced-goal-attribute nil)
  (proced-show-remote-processes t)
  (proced-enable-color-flag t)
  (proced-format 'custom)
  :config
  (add-to-list
   'proced-format-alist
   '(custom user pid ppid sess tree pcpu pmem rss start time state (args comm)))
  ;; handy advice that makes it so that calling C-d on multi-vterm buffer closes the window
  (advice-add 'proced :after #'toggle-window-dedicated))
#+end_src

** user info
#+begin_src emacs-lisp
(setq user-full-name "Ben Juntilla"
      user-mail-address "ben@benjuntilla.com")
#+end_src
** ~delight~
#+begin_src emacs-lisp
(use-package delight)
#+end_src
** ~bug-hunter~
Bisect files to find errors
#+begin_src emacs-lisp
(use-package bug-hunter)
#+end_src
** ~crux~
#+begin_src emacs-lisp
(use-package crux
  :config (crux-reopen-as-root-mode)
  :general ('normal :prefix "C-c"
                    "o o" 'crux-open-with
                    "o u" 'crux-view-url
                    "R" 'crux-rename-file-and-buffer
                    "D" 'crux-delete-file-and-buffer
                    "n" 'crux-cleanup-buffer-or-region
                    "F" 'crux-recentf-find-directory))
#+end_src
** ~which-key~
#+begin_src emacs-lisp
(use-package which-key
  :delight
  :custom
  (which-key-max-description-length 50)
  :config (which-key-mode))
#+end_src
** Terminal
Use ~vterm~ for fast terminal emulation
#+begin_src emacs-lisp
(use-package vterm
  :custom
  (vterm-keymap-exceptions '("C-c" "C-w ""C-x" "C-u" "C-g" "C-h" "C-l" "M-x" "M-o" "C-y" "M-y")))
#+end_src

Use ~multi-vterm~ to manage multiple ~vterm~ buffers
#+begin_src emacs-lisp
(use-package multi-vterm
  :general
  (:prefix "C-c t"
           "c" #'multi-vterm
           "n" #'multi-vterm-next
           "p" #'multi-vterm-prev
           "t" #'multi-vterm-dedicated-toggle
           "p" #'multi-vterm-project)
  :config
  ;; handy advice that makes it so that calling C-d on multi-vterm buffer closes the window
  (advice-add 'multi-vterm :after #'toggle-window-dedicated))
#+end_src
** ~helpful~
#+begin_src emacs-lisp
(use-package helpful
  :general (("C-h f" 'helpful-callable)
            ("C-h v" 'helpful-variable)
            ("C-h k" 'helpful-key)
            ("C-h F" 'helpful-function)
            ("C-h C" 'helpful-command)
            ("C-c C-d" 'helpful-at-point)))
#+end_src
* org
#+begin_src emacs-lisp
(use-package org
  :delight (org-indent-mode) (org-cdlatex-mode)
  :hook ((org-mode . (lambda ()
                       ;; enable certain modes when in roam dir
                       (when (string-prefix-p (expand-file-name org-root-dir) (buffer-file-name))
                         (setq line-spacing 2)
                         (adaptive-wrap-prefix-mode)
                         (mixed-pitch-mode))))
         ;; automatically switch TODO entry to done when all its subentries are complete
         (org-after-todo-statistics . my/org-summary-todo)
         ;; redisplay inline images after org-babel execution
         (org-babel-after-execute . (lambda ()
                                      (when org-inline-image-overlays
                                        (org-redisplay-inline-images))))
         (org-mode . org-cdlatex-mode))
  :general
  ("C-c A" 'org-capture
   "C-c a" 'org-agenda)
  (org-mode-map
   "C-c l y" 'my/org-yank-link)
  :custom
  (org-attach-auto-tag nil)
  (org-attach-method 'mv)
  (org-attach-use-inheritance t)
  (org-attach-store-link-p 'attached)
  (org-attach-directory "attach/")
  (org-attach-id-dir "attach/")
  (org-attach-dir-relative "attach/")
  (org-startup-folded nil)
  (org-directory org-root-dir)
  (org-export-with-smart-quotes t)
  (org-return-follows-link t)
  (org-image-actual-width 600)
  (org-startup-with-inline-images t)
  (org-startup-indented t)
  (org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@/!)" "|" "DONE(d)" "CANC(c@)")))
  (org-todo-keyword-faces '(("[-]" . +org-todo-active)
                           ("NEXT" . +org-todo-active)
                           ("STRT" . +org-todo-active)
                           ("[?]" . +org-todo-onhold)
                           ("WAIT" . +org-todo-onhold)
                           ("HOLD" . +org-todo-onhold)
                           ("PROJ" . +org-todo-project)
                           ("NO" . +org-todo-cancel)
                           ("CANC" . +org-todo-cancel)))
  (org-hide-emphasis-markers t)
  (org-enforce-todo-dependencies t)
  (org-enforce-todo-checkbox-dependencies t)
  (org-log-into-drawer t)
  (org-log-repeat t)
  (org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                          (file . find-file)
                          (vm-imap . vm-visit-imap-folder-other-frame)
                          (gnus . org-gnus-no-new-news) (file . find-file-other-window)
                          (wl . wl-other-frame)))
  (org-special-ctrl-a/e t)
  (org-modules (quote (org-habit org-protocol)))
  ;; (org-agenda-files `(,(concat org-directory "/routine.org")
                      ;; ,(concat org-directory "/inbox.org")))
  (org-tags-exclude-from-inheritance '("todo"))
  (org-agenda-tags-column 0)
  (org-deadline-warning-days 7)
  (org-tags-column 0)
  (org-auto-align-tags nil)
  (org-agenda-prefix-format '((agenda . " %i %-12:c%-12t%-6e% s")
                                (todo . " %i %-12:c %-6e")
                                (tags . " %i %-12:c")
                                (search . " %i %-12:c")))
  (org-habit-show-habits-only-for-today t)
  (org-refile-use-outline-path 'file)
  (org-default-notes-file (concat org-directory "/inbox.org"))
  (org-capture-templates '(("t" "Inbox TODO" entry (file "inbox.org")
                            "* TODO %i%?")
                           ("j" "Daily Journal" entry (file "daily_journal.org")
                            "* %u")))
  (org-outline-path-complete-in-steps nil)
  (org-edit-src-content-indentation 0)
  (org-pretty-entities t)
  (org-archive-location "%s_archive::")
  (org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (org-src-fontify-natively t)
  (org-src-window-setup 'current-window) ;; edit in current window
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation nil) ;; do not put two spaces on the left
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  :config
  (add-to-list 'org-agenda-custom-commands
    '("u" "TODOs with no set schedule or deadline" tags "-DEADLINE={.+}-SCHEDULED={.+}/!+TODO"))
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
#+end_src

Custom word count function. This function counts words in a
straightforward way, skipping over lines that start with #+ (which are
often Org-mode special lines like ~#+LATEX:~) and skipping over blocks
that start with ~#+BEGIN_~ and end with ~#+END_~. Note that this function
is a basic example and might need adjustments based on the specific
format of your Org-mode documents and the exact requirements you have.
#+begin_src emacs-lisp
(defun ben/count-words-excluding-special-blocks ()
  "Count words in an org-mode buffer, excluding export blocks (case-insensitive) and lines starting with '#+'."
  (interactive)
  (save-excursion
    (let ((word-count 0)
          (case-fold-search t)) ; Make searches case-insensitive
      (goto-char (point-min))
      (while (< (point) (point-max))
        (cond
         ((looking-at "^#\\+") ; Skip lines starting with '#+'
          (forward-line 1))
         ((looking-at "^[ \t]*#\\+begin_") ; Skip export blocks, case-insensitive
          (re-search-forward "^[ \t]*#\\+end_" nil 'move))
         (t
          (forward-word 1)
          (setq word-count (1+ word-count)))))
      (message "Word count (excluding special blocks and lines): %s" word-count))))
#+end_src
** automatically pull when opening roam file
#+begin_src emacs-lisp
(defun ben/org-roam-pull ()
  "Pull from the git repository's upstream."
  (let ((default-directory org-root-dir))
    (shell-command "git pull --ff-only")))

;; (add-hook 'org-roam-find-file-hook #'ben/org-roam-pull)
#+end_src
** ~org-agenda-files-track~
#+begin_src emacs-lisp
(use-package org-agenda-files-track
   :config

   (defun org-dynamic-agenda-predicate ()
  "Check if the file should be added to the variable `org-agenda-files'."
   (org-element-map
       (org-element-parse-buffer 'headline)
       'headline
     ;; This is the predicate matching if a headline makes an org-agenda-file.
     (lambda (h)
       (eq (org-element-property :todo-type h) 'todo))
     nil 'first-match))

   (org-agenda-files-track-mode))
#+end_src

Define reinitialization function
#+begin_src emacs-lisp
(defun my/org-agenda-files-track-init ()
  "(Re)initialize dynamic agenda files.

This can take a long time, so it is recommended to run this only
on installation and when first tasks are added to many files via
methods the save hook cannot detect, like file synchronization."
  (interactive)
  ;; ;; uncomment if storing org-agenda-files in file
  ;; (make-empty-file org-agenda-files 'force)
  (org-store-new-agenda-file-list
   (directory-files-recursively
    org-directory (rx ".org" eos) nil
    ;; ignore hidden directories like .git and .attach
    (lambda (subdir)
      (not (eq ?. (string-to-char (file-name-nondirectory subdir)))))))
  ;; use ql here if desired
  ;; (org-agenda-files-track-cleanup-files 'full)
  (message "Initialized agenda files"))
#+end_src
** ~org-super-agenda~
#+begin_src emacs-lisp
(use-package org-super-agenda
  :after org
  :config (org-super-agenda-mode)
  :custom
  (org-super-agenda-header-map (make-sparse-keymap))
  (org-super-agenda-groups
   '(
     (:name "Today"
            :scheduled "today"
            :time-grid t)
     (:name "Overdue"
            :order -1
            :priority>= "C"
            :todo ("TODO")
            :scheduled "past")
     )))
#+end_src
** Templates
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("t" . "src emacs-lisp"))
#+end_src
** ~org-roam~
#+begin_src emacs-lisp
(use-package org-roam
  :general
  ("C-c r f" 'org-roam-node-find
   "C-c r g" 'org-roam-graph)
  (org-mode-map
   "C-c r r" 'org-roam-buffer-toggle
   "C-c l r" 'org-roam-node-insert)
  :config
  ;; (set-face-attribute 'org-roam-link nil :foreground "#bb6ec5")
  (org-roam-db-autosync-mode)
  :custom
  (org-roam-v2-ack t)
  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-completion-everywhere nil)
  (org-roam-directory org-root-dir)
  (org-roam-db-location (concat org-root-dir "/db/org-roam.db"))
  (org-roam-capture-templates '(("d" "default" plain "%?"
                                 :if-new (file+head "${slug}.org" "#+title: ${title}\n#+filetags: %^{prompt|personal|technology|politics}\n\n")
                                 :unnarrowed t)
                                ("r" "ravenfield" plain "%?"
                                 :if-new (file+head "${slug}.org" "#+title: ${title}\n#+filetags: ravenfield\n\n* Tasks\n\n* Current Changelog")
                                 :unnarrowed t))))
#+end_src
** ~org-agenda~
#+begin_src emacs-lisp
(setq org-agenda-start-day nil)
(setq org-agenda-span 5)
(setq org-agenda-start-on-weekday nil)
#+end_src
*** Refresh org-agenda whenever a task is rescheduled
#+begin_src emacs-lisp
(defun org-agenda-refresh ()
  "Refresh all `org-agenda' buffers."
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (when (derived-mode-p 'org-agenda-mode)
        (org-agenda-maybe-redo)))))

(defadvice org-schedule (after refresh-agenda activate)
  "Refresh org-agenda."
  (org-agenda-refresh))
#+end_src
*** Keep task metadata clean
#+begin_src emacs-lisp
;; Log time a task was set to DONE.
(setq org-log-done (quote time))

;; Don't log the time a task was rescheduled or redeadlined.
(setq org-log-redeadline nil)
(setq org-log-reschedule nil)
#+end_src
*** Prefer rescheduling to future times & dates
#+begin_src emacs-lisp
(setq org-read-date-prefer-future 'time)
#+end_src
** ~org-tempo~
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
** ~org-download~
#+begin_src emacs-lisp
(use-package org-download
  :hook (dired-mode . org-download-enable)
  :custom
  (org-download-method 'attach)
  (org-download-timestamp ""))
#+end_src
* Citations
#+begin_src emacs-lisp
(setq my/bib (concat org-ref-dir "/bib.bib")
      my/papers (concat org-ref-dir "/papers/")
      my/notes (concat org-ref-dir "/notes"))
#+end_src

Use ~citar~ for completing-read bibliography interface
#+begin_src emacs-lisp
(use-package citar
  :bind
  (:map org-mode-map ("C-c b" . #'org-cite-insert))
  :custom
  (org-cite-global-bibliography `(,my/bib))
  (citar-bibliography org-cite-global-bibliography)
  (citar-notes-paths `(,org-directory))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-at-point-function 'embark-act)
  :hook
  ((LaTeX-mode org-mode) . citar-capf-setup))
#+end_src
Also add ~embark~ support
#+begin_src emacs-lisp
(use-package citar-embark
  :delight
  :after (citar embark)
  :config (citar-embark-mode))
#+end_src
Also add ~org-roam~ integration
#+begin_src emacs-lisp
(use-package citar-org-roam
  :delight
  :after (citar org-roam)
  :config (citar-org-roam-mode))
#+end_src
** ~ebib~
#+begin_src emacs-lisp
(use-package ebib
  :custom
  (ebib-autogenerate-keys t)
  :config
  (require 'ebib-biblio)
  (define-key ebib-index-mode-map (kbd "B") #'ebib-biblio-import-doi)
  (define-key biblio-selection-mode-map (kbd "e") #'ebib-biblio-selection-import))
#+end_src
** ~biblio~
Browse and import bibliographic references from CrossRef, DBLP, HAL,
arXiv, Dissemin, and doi.org from Emacs
#+begin_src emacs-lisp
(use-package biblio
  :custom
  (biblio-bibtex-use-autokey t))
#+end_src
* File management & viewing
** ~pdf-tools~
#+begin_src emacs-lisp
(use-package pdf-tools
  :custom (pdf-view-display-size 'fit-page)
  :config (pdf-tools-install)
  :mode ("\\.pdf" . pdf-view-mode))
#+end_src
** ~dired~
Add command to copy path to clipboard
#+begin_src emacs-lisp
(defun ben/dired-copy-path-to-clipboard ()
  "Copy the current directory path in dired to the clipboard."
  (interactive)
  (let ((dir (dired-current-directory)))
    (with-temp-buffer
      (insert dir)
      (clipboard-kill-region (point-min) (point-max)))
    (message "Copied '%s' to clipboard" dir)))

(general-define-key
 :keymaps 'dired-mode-map
 "C-c y" 'dired-copy-path-to-clipboard)
#+end_src

Add additional syntax highlighting
#+begin_src emacs-lisp
(use-package diredfl
  :hook
  ;; highlight parent and directory preview as well
  (dirvish-directory-view-mode . diredfl-mode)
  :config
  (diredfl-global-mode)
  (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src

Set file operation target directories to other dired window if possible
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src

Ask to create destination directories
#+begin_src emacs-lisp
(setq dired-create-destination-dirs 'ask)
#+end_src

Perform dired renaming w/ underlying VCS commands
#+begin_src emacs-lisp
(setq dired-vc-rename-file t)
#+end_src

Automatically revert dired source-file-buffer upon revisit
#+begin_src emacs-lisp
(setq dired-auto-revert-buffer t)
#+end_src

Add mouse support
#+begin_src emacs-lisp
(setq dired-mouse-drag-files t
      mouse-drag-and-drop-region-cross-program t)
#+end_src
*** ~dirvish~
#+begin_src emacs-lisp
(use-package dirvish
  :init (dirvish-override-dired-mode)
  :general (dirvish-mode-map
            "g z" 'dirvish-quick-access)
  :custom (dirvish-attributes
           '(vc-state subtree-state all-the-icons git-msg file-size))
  (dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  (dirvish-use-header-line 'global)
  (dirvish-header-line-format '(:left (path) :right (free-space)))
  (dirvish-mode-line-format '(:left (sort file-time " " file-size symlink) :right (omit yank index)))
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan"))))
#+end_src
** ~mpv.el~
#+begin_src emacs-lisp
(use-package mpv
  :config
  ;; from https://github.com/kljohann/mpv.el/wiki
  (org-link-set-parameters "mpv" :follow #'mpv-play)
  (defun org-mpv-complete-link (&optional arg)
    (replace-regexp-in-string
     "file:" "mpv:"
     (org-link-complete-file arg)
     t t))

  (defun my:mpv/org-metareturn-insert-playback-position ()
    (when-let ((item-beg (org-in-item-p)))
      (when (and (not org-timer-start-time)
                 (mpv-live-p)
                 (save-excursion
                   (goto-char item-beg)
                   (and (not (org-invisible-p)) (org-at-item-timer-p))))
        (mpv-insert-playback-position t))))
  (add-hook 'org-metareturn-hook #'my:mpv/org-metareturn-insert-playback-position)

  (add-hook 'org-open-at-point-functions #'mpv-seek-to-position-at-point))
#+end_src
** ~tramp~
#+begin_src emacs-lisp
(require 'tramp)
#+end_src
** ~magit~
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
(with-eval-after-load 'project
  (add-to-list 'project-switch-commands '(magit-project-status "Magit" "m")))
#+end_src
** ~vdiff~
#+begin_src emacs-lisp
(use-package vdiff
  :after evil
  :general ('(vdiff-mode-map vdiff-3way-mode-map)
            "z" vdiff-mode-prefix-map)
  :config
  (evil-make-intercept-map vdiff-mode-prefix-map))
#+end_src
*** ~vdiff-magit~
#+begin_src emacs-lisp
(use-package vdiff-magit
  :after (vdiff magit)
  :general (magit-mode-map
            "e" 'vdiff-magit-dwim
            "E" 'vdiff-magit)
  :config
  (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
  (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
  (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
  (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit))
#+end_src
** ~git-link~
This is actually so tough
#+begin_src emacs-lisp
(use-package git-link
  :custom
  (git-link-open-in-browser t))
#+end_src
** ~git-auto-commit-mode~
#+begin_src emacs-lisp
(use-package git-auto-commit-mode
  :custom (gac-automatically-push-p t)
  :config
  ;; add to safe values for use in .dir-locals
  (add-to-list 'safe-local-variable-values '(gac-automatically-add-new-files-p . t)))
#+end_src
* Editing & Programming
#+begin_src emacs-lisp
(setq-default org-catch-invisible-edits 'smart)
(setq-default org-ctrl-k-protect-subtree t)
(setq org-confirm-babel-evaluate nil)
(setq sentence-end-double-space nil)
(delete-selection-mode t)
#+end_src

~csv-mode~ configuration
#+begin_src emacs-lisp
(add-hook 'csv-mode-hook
          (lambda ()
            (csv-align-mode)
            (csv-header-line)))
#+end_src

Escape the escape backslash madness in ~re-builder~
#+begin_src emacs-lisp
(setq reb-re-syntax 'string)
#+end_src

Use ~embark~ for quick contextual actions
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-c SPC" . #'embark-act)
   ("C-c C-SPC" . #'embark-dwim)))
#+end_src

Configure ~proselint~ for text modes via ~flymake~
#+begin_src emacs-lisp
(use-package flymake-proselint
  :hook ((org-mode text-mode) . (lambda ()
                                  (flymake-mode)
                                  (flymake-proselint-setup))))
#+end_src

Add emmet support
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook
  ((web-mode sgml-mode css-mode) . #'emmet-mode)
  :custom
  (emmet-self-closing-tag-style " /")
  (emmet-move-cursor-between-quotes t)
  :general
  ('insert 'override
   "C-j" 'emmet-expand-line))
#+end_src

Set python interpreter path
#+begin_src emacs-lisp
(setq python-interpreter "~/.guix-profile/bin/python3")
#+end_src

Undo behavior with ~undo-fu~
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

Use ~editorconfig~ for consistent IDE settings
#+begin_src emacs-lisp
(use-package editorconfig
  :delight
  :config
  (editorconfig-mode 1))
#+end_src

Use ~copilot.el~ for LLM-powered completions. Note that this depends on
~editorconfig~, ~jsonrpc~, ~dash~, ~f~, and ~s~
#+begin_src emacs-lisp :tangle no
(use-package copilot
  :after (editorconfig s)
  :vc (:url "https://github.com/benjuntilla/copilot.el" :branch "main" :rev :newest)
  :init
  (require 's)
  :custom
  (copilot-node-executable "~/.guix-profile/bin/node")
  :hook prog-mode
  :general
  (override :prefix "C-c c"
            "c" #'copilot-complete
            "o" #'copilot-clear-overlay
            "TAB" #'copilot-accept-completion
            [tab] #'copilot-accept-completion
            "w" #'copilot-accept-completion-by-word
            "l" #'copilot-accept-completion-by-line
            "n" #'copilot-next-completion
            "p" #'copilot-previous-completion))
#+end_src


Enable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Repeating.html][repeat-mode]]
#+begin_src emacs-lisp
(repeat-mode)
#+end_src

Set up tab configuration
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 2)
(setq-default cperl-indent-level 2)
#+end_src

Use ~auto-fill-mode~ for hard wrapping
#+begin_src emacs-lisp
(toggle-text-mode-auto-fill)
#+end_src

Use ~org-noter~ for annotating documents
#+begin_src emacs-lisp
(use-package org-noter
  :custom
  (org-noter-default-notes-file-names '("notes.org"))
  (org-noter-notes-search-path '("~/org")))
#+end_src

Bind key to go to scratch source-file-buffer
#+begin_src emacs-lisp
(general-def 'normal :prefix "g"
  "s" #'scratch-buffer)
#+end_src

Use ~typo-mode~ for easy insertion of typographically useful unicode characters
#+begin_src emacs-lisp
(use-package typo)
#+end_src

Install ~git-modes~ for editing git-related files
#+begin_src emacs-lisp
(use-package git-modes)
#+end_src

Install ~web-mode~
#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

Configure ~sgml-mode~
#+begin_src emacs-lisp
(add-hook 'sgml-mode-hook
  (lambda ()
    (setq sgml-quick-keys t)
    (sgml-electric-tag-pair-mode)))
#+end_src

Create derived ~vue-mode~ for use with ~eglot~. Credit to [[https://github.com/joaotavora/eglot/discussions/1184]]
#+begin_src emacs-lisp
;; web-mode setup
(define-derived-mode vue-mode web-mode "Vue")
(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
#+end_src

Use ~rustic~ for rust stuff
#+begin_src emacs-lisp
(use-package rustic
  :custom
  (rustic-lsp-client 'eglot))
#+end_src
** latex
*** ~auctex~ & ~reftex~
#+begin_src emacs-lisp
(use-package tex-site
  :ensure auctex
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-view-program-selection '((output-pdf "PDF Tools")))
  (TeX-source-correlate-start-server t)
  (reftex-plug-into-AUCTeX t)
  :config
  (setq-default TeX-master nil)
  :general (LaTeX-mode-map
            "TAB" 'cdlatex-tab)
  :hook
  (LaTeX-mode . (lambda () (reftex-mode) (display-line-numbers-mode) (TeX-source-correlate-mode) (outline-minor-mode))))
#+end_src
*** ~cdlatex~
#+begin_src emacs-lisp
(use-package cdlatex
  :hook LaTeX-mode)
#+end_src
*** ~evil-tex~
#+begin_src emacs-lisp
(use-package evil-tex
    :hook (TeX-mode . evil-tex-mode))
#+end_src
** ~ibuffer~
Bind [[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] for advanced replacement of BufferMenu
#+begin_src emacs-lisp
(general-def "C-x C-b" 'ibuffer)
#+end_src

Configure default ~ibuffer~ filter group
#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
      '(("default"
         ("dired" (mode . dired-mode))
         ("org" (mode . org-mode))
         ("erc" (mode . erc-mode))
         ("asterisk" (name . "^\\*.*\\*$")))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

Install ~ibuffer-vc~ to dynamically create filter groups by VC project
#+begin_src emacs-lisp
(use-package ibuffer-vc)
#+end_src
** ~treesit~
Install ~treesitter~ for advanced syntax highlighting, code folding, and
structural editing. Grammars are installed via the ~guix~ package
manager.
#+begin_src emacs-lisp
(use-package treesit
  :custom
  (treesit-extra-load-path '("~/.guix-profile/lib/tree-sitter/"))
  ;; Remap old language modes primarily used for syntax highlighting to Treesitter versions
  (major-mode-remap-alist
    '((css-mode  . css-ts-mode)
      (javascript-mode . js-ts-mode)
      (python-mode . python-ts-mode)
      (js-json-mode . json-ts-mode)
      (csharp-mode . csharp-ts-mode)))
  ;; Define on a filename basis for modes that don't already exist
  :mode
  ("\\.ts" . typescript-ts-mode)
  ("\\.jsx" . tsx-ts-mode)
  ("\\.tsx" . tsx-ts-mode))
#+end_src
** ~eglot~
Install ~eglot~ to natively use LSP
#+begin_src emacs-lisp
(defun vue-eglot-init-options ()
             (let ((tsdk-path "/home/ben/.pnpm/global/5/node_modules/typescript/lib"))
               `(:typescript (:tsdk ,tsdk-path
                              :languageFeatures (:completion
                                                 (:defaultTagNameCase "both"
                                                  :defaultAttrNameCase "kebabCase"
                                                  :getDocumentNameCasesRequest nil
                                                  :getDocumentSelectionRequest nil)
                                                 :diagnostics
                                                 (:getDocumentVersionRequest nil))
                              :documentFeatures (:documentFormatting
                                                 (:defaultPrintWidth 100
                                                  :getDocumentPrintWidthRequest nil)
                                                 :documentSymbol t
                                                 :documentColor t)))))

(use-package eglot
  :custom
  (completion-category-defaults nil)  ;; override defafult eglot modification to use orderless
  :general (eglot-mode-map
            "C-c e r" 'eglot-rename
            "C-c e f" 'eglot-format
            "C-c e i" 'eglot-code-action-organize-imports
            "C-c e q" 'eglot-code-action-quickfix
            "C-c e x" 'eglot-code-action-extract
            "C-c e i" 'eglot-code-action-inline
            "C-c e w" 'eglot-code-action-rewrite
            "C-c e SPC" 'eglot-code-actions)
  ;; When to run Eglot
  :hook ((python-ts-mode
          csharp-ts-mode
          js-ts-mode
          typescript-ts-mode
          tsx-ts-mode
          css-ts-mode
          rustic-mode
          LaTeX-mode
          svelte-mode
          vue-mode) . eglot-ensure)
  ;; Custom backends when running Eglot
  :config
  (add-to-list 'eglot-server-programs
               '(rustic-mode .
                 ("rust-analyzer" :initializationOptions (:check (:command "clippy")))))
  (add-to-list 'eglot-server-programs
               '(LaTeX-mode . ("ltex-ls")))
  (add-to-list 'eglot-server-programs
               '(svelte-mode . ("svelteserver" "--stdio")))
  ;; Must have volar installed for this
  (add-to-list 'eglot-server-programs
               `(vue-mode . ("vue-language-server" "--stdio" :initializationOptions ,(vue-eglot-init-options))))
  ;; configure language servers
  (setq-default eglot-workspace-configuration
                '((:pylsp .
                          (:configurationSources ["flake8"]
                             :plugins (:pycodestyle (:enabled :json-false)
                                       :mccabe (:enabled :json-false)
                                       :pyflakes (:enabled :json-false)
                                       :pydocstyle (:enabled :json-false)
                                       :yapf (:enabled :json-false)
                                       :autopep8 (:enabled :json-false)
                                       :ruff (:enabled :json-false
                                              :lineLength 88)
                                       :flake8 (:enabled t
                                                :maxLineLength 88)
                                       :black (:enabled t
                                               :line_length 88
                                               :cache_config t)))))))
#+end_src
** ~literate-calc-mode~
#+begin_src emacs-lisp
(use-package literate-calc-mode)
#+end_src
** ~smartparens~
#+begin_src emacs-lisp
(use-package smartparens
  :delight
  :config
  (require 'smartparens-config)
  (smartparens-global-mode))
#+end_src
** ~ws-butler~
#+begin_src emacs-lisp
(use-package ws-butler
  :delight
  :config
  (ws-butler-global-mode))
#+end_src
** ~expand-region~
#+begin_src emacs-lisp
(use-package expand-region
  :general
  ("C--" 'er/contract-region)
  ("C-=" 'er/expand-region))
#+end_src
** ~wgrep~
#+begin_src emacs-lisp
(use-package wgrep)
#+end_src
** Docker
*** ~docker-compose-mode~
#+begin_src emacs-lisp
(use-package docker-compose-mode)
#+end_src
*** ~dockerfile-mode~
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
** ~evil~
#+begin_src emacs-lisp
(use-package evil
  :general
  ('normal
   "g b" 'consult-buffer)
  ('motion
   "C-e" 'evil-end-of-line)
  (org-mode-map 'normal
   "RET" 'org-return)
  ('insert
   "C-<return>" 'electric-newline-and-maybe-indent)
  :custom
  (evil-want-integration t)
  (evil-want-keybinding nil)
  (evil-jumps-cross-buffers nil)
  (evil-undo-system 'undo-fu)
  :config
  (evil-mode 1))
#+end_src
evil escape
#+begin_src emacs-lisp
(use-package evil-escape
  :delight
  :config (evil-escape-mode))
#+end_src
*** ~evil-collection~
#+begin_src emacs-lisp
(use-package evil-collection
  :delight evil-collection-unimpaired-mode
  :after (evil)
  :custom
  (forge-add-default-bindings nil)  ;; disables annoying start-up warning
  :config (evil-collection-init))
#+end_src
*** ~evil-goggles~
#+begin_src emacs-lisp
(use-package evil-goggles
  :delight
  :config (evil-goggles-mode))
#+end_src
*** ~evil-owl~
#+begin_src emacs-lisp
(use-package evil-owl
  :delight
  :custom
  (evil-owl-idle-delay 0.1)
  :config
  (evil-owl-mode))
#+end_src
*** ~evil-exchange~
#+begin_src emacs-lisp
(use-package evil-exchange
  :config (evil-exchange-install))
#+end_src
*** ~evil-nerd-commenter~
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :after evil
  :config (evilnc-default-hotkeys))
#+end_src
*** ~evil-matchit~
#+begin_src emacs-lisp
(use-package evil-matchit
  :after evil)
#+end_src
*** ~evil-surround~
#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src
*** ~evil-org~
#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :delight
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
*** ~evil-multiedit~
#+begin_src emacs-lisp
(use-package evil-multiedit
  :config (evil-multiedit-default-keybinds))
#+end_src
** ~rainbow-delimiters~
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook prog-mode)
#+end_src
** ~rainbow-mode~
Highlight color hexes
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src
** ~iedit~
#+begin_src emacs-lisp
(use-package iedit
  :general ('visual "C-;" iedit-mode))
#+end_src
** Error checking
Configure ~jinx~ for spell checking. [[https://github.com/minad/jinx?tab=readme-ov-file#alternative-spell-checking-packages][Considering the alternatives]], this
seems to be the most efficient and effective spell checker. This
package uses ~aspell~ by default for English.
#+begin_src emacs-lisp
(use-package jinx
  :delight
  :hook (emacs-startup . global-jinx-mode)
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages)))
#+end_src
** Snippets
~tempel~
#+begin_src emacs-lisp
(use-package tempel
  :init

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-complete
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf))
#+end_src

Use ~eglot-tempel~ to provide templating for ~eglot~
#+begin_src emacs-lisp
(use-package eglot-tempel
  :after eglot)
#+end_src
* Movement & Navigation
Use ripgrep for search
#+begin_src emacs-lisp
(use-package rg)
#+end_src

Scrolling behavior
#+begin_src emacs-lisp
(setq scroll-conservatively 0
      scroll-margin 0)
#+end_src

Smooth scrolling
#+begin_src emacs-lisp
(pixel-scroll-precision-mode)
#+end_src

Use ~ctrl-f~ for better incremental search
#+begin_src emacs-lisp
(use-package ctrlf
  :config
  (ctrlf-mode)
  :custom
  ;; focus beginning of match after finishing search
  (ctrlf-go-to-end-of-match nil)
  :general
  ('override
   "C-s" 'ctrlf-forward-default))
#+end_src
** Window Management
Use ~shackle~ to make window management nice with sway
#+begin_src emacs-lisp
(use-package shackle
  :custom
  (shackle-rules
   `(("*evil-owl*" :frame nil :select nil)
     (" *Agenda Commands*" :same t)
     ("*Org Agenda*" :same t)
     ("*Proced*" :same t :select t)
     ("*Messages*" :frame t :select t)
     ("*Help*" :frame t :select t)
     ('vterm-mode :frame t :select t)))
  :config
  (shackle-mode))
#+end_src

Use ~ace-window~ for quick window selection
#+begin_src emacs-lisp
(use-package ace-window
  :general ("M-o" 'ace-window)
  :config (ace-window-display-mode 1))
#+end_src

Use ~winner~ to quickly undo/redo window configurations
#+begin_src emacs-lisp
(winner-mode)

(windmove-default-keybindings)
(setq org-replace-disputed-keys t)
#+end_src
** anzu
#+begin_src emacs-lisp
(use-package anzu
  :delight
  :config (global-anzu-mode)
  :general
  ([remap query-replace] 'anzu-query-replace
   [remap query-replace-regexp] 'anzu-query-replace-regexp)
  (isearch-mode-map
   [remap isearch-query-replace] 'anzu-isearch-query-replace
   [remap isearch-query-replace-regexp] 'anzu-isearch-query-replace-regexp))
#+end_src
*** evil-anzu
#+begin_src emacs-lisp
(use-package evil-anzu
  :after (evil anzu))
#+end_src
** ~avy~
#+begin_src emacs-lisp
(use-package avy
  :general
  ('normal 'override :prefix "g"
           "c" 'avy-goto-char-2
           "C" 'avy-goto-char-timer
           "w" 'avy-goto-word-0
           "W" 'avy-goto-word-1
           "SPC" 'avy-goto-line)
  :config
  (avy-setup-default))
#+end_src
* Appearance
Use ~indent-bars~ to style indentation
#+begin_src emacs-lisp :tangle no
(use-package indent-bars
  :vc (:url "https://github.com/jdtsmith/indent-bars"
            :branch "main")
  :config
  (require 'indent-bars-ts)  ; not needed with straight
  :custom
  (indent-bars-treesit-support t)
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  (indent-bars-treesit-scope '((python function_definition class_definition for_statement
                                       if_statement with_statement while_statement)))
  :hook prog-mode)
#+end_src

Suppress annoying stuff in minibuffer when using emacscclient
#+begin_src emacs-lisp
(setq server-client-instructions nil)
#+end_src

Fonts with ~mixed-pitch~
#+begin_src emacs-lisp
(use-package mixed-pitch
  :delight
  :custom (mixed-pitch-set-height t)
  :config
  (setq mixed-pitch-fixed-pitch-faces (append mixed-pitch-fixed-pitch-faces '(org-column org-column-title treemacs-tags-face treemacs-file-face treemacs-root-face treemacs-directory-face)))
  ;; Default fonts
  (set-face-attribute 'default nil :family "Iosevka" :height 110)
  (set-face-attribute 'variable-pitch nil :family "Libertinus Serif" :height 1.2)
  ;; Size different org elements
  (set-face-attribute 'org-document-title nil :height 1.5)
  (set-face-attribute 'org-level-1 nil :height 1.3)
  (set-face-attribute 'org-level-2 nil :height 1.15)
  (set-face-attribute 'org-level-3 nil :height 1.075)
  (mixed-pitch-mode))
#+end_src

Enable mouse interaction in terminal
#+begin_src emacs-lisp
(xterm-mouse-mode 1)
#+end_src

Miscellaneous 
#+begin_src emacs-lisp
(global-prettify-symbols-mode)
(show-paren-mode 1) ; visualize matching parenthesees
(setq frame-resize-pixelwise t) ; fix gaps in window manager
;; (plist-put org-format-latex-options :scale 1.5)  ;; bigger inline latex previews
(setq org-preview-latex-default-process 'imagemagick)
(setq-default frame-title-format '("%n %b - %F"))
(setq uniquify-buffer-name-style 'forward)
(column-number-mode t)
(setq-default indicate-empty-lines t)
(custom-set-faces
 '(org-ellipsis ((t (:foreground "deep sky blue" :underline nil)))))
#+end_src

"Adaptive Wrap Mode is the (soft wrap) analog on the left side, as
VisualFillColumn is on the right side."
#+begin_src emacs-lisp
(use-package adaptive-wrap)
#+end_src

Show whitespace information
#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'whitespace-mode)
(setq whitespace-style '(face tabs spaces trailing
                              space-before-tab newline indentation
                              empty space-after-tab tab-mark
                              missing-newline-at-eof))
#+end_src

** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-icon '(display-graphic-p))
  (doom-modeline-minor-modes t)
  (doom-modeline-enable-word-count t)
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (doom-modeline-indent-info t)
  :init (doom-modeline-mode 1))
#+end_src
** ~org-superstar~
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode))
#+end_src
** ~org-modern~
#+begin_src emacs-lisp
(use-package org-modern
  :config (global-org-modern-mode)
  :custom
  (org-modern-table nil)
  (org-modern-priority-faces
           (quote ((?A :background "red"
                       :foreground "white")
                   (?B :background "orange"
                       :foreground "white")
                   (?C :background "blue"
                       :foreground "white")))))
#+end_src
** ~page-break-lines~
#+begin_src emacs-lisp
(use-package page-break-lines)
#+end_src
** ~all-the-icons~
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** ~dimmer~
#+begin_src emacs-lisp
(use-package dimmer
  :config
  (dimmer-configure-hydra)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-which-key)
  (dimmer-mode))
#+end_src
** ~solaire-mode~
#+begin_src emacs-lisp
(use-package solaire-mode
  :config (solaire-global-mode))
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
** Doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-molokai-brighter-comments t)
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (custom-set-faces
   `(org-level-1 ((t (:weight bold :height 1.3 :foreground ,(doom-color 'fg)))))))
#+end_src
** diff-hl
[[https://github.com/dgutov/diff-hl/issues/116#issuecomment-449134234][Minimal fringe code src]]
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  ;; integrate w/ magit
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  ;; Minimal fringe
  (let* ((height (frame-char-height))
         (width 2)
         (ones (1- (expt 2 width)))
         (bits (make-vector height ones)))
    (define-fringe-bitmap 'my-diff-hl-bitmap bits height width))
  (setq diff-hl-fringe-bmp-function (lambda (type pos) 'my-diff-hl-bitmap))
  ;; set modes
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode))
#+end_src
** org-appear
#+begin_src emacs-lisp
(use-package org-appear
  :hook org-mode
  :custom
  (org-appear-autoentities t))
#+end_src
* completions
** ~corfu~
#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-auto t)  ;; automatically display completions
  (corfu-auto-prefix 2)
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  :bind
  (:map corfu-map
	;; https://github.com/minad/corfu#tab-and-go-completion
	("TAB" . corfu-next)
	([tab] . corfu-next)
	("S-TAB" . corfu-previous)
	([backtab] . corfu-previous))
  :config
  (global-corfu-mode))
#+end_src

Display candidate documentation or source in a popup next to the candidate menu.
#+begin_src emacs-lisp
(use-package corfu-popupinfo
  :custom
  (corfu-popupinfo-delay nil)
  :config (corfu-popupinfo-mode))
#+end_src
** ~corfu-terminal~
#+begin_src emacs-lisp
  (use-package corfu-terminal
    :config
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)))
#+end_src
** ~kind-icon~
Adds SVG icons to ~corfu~
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-use-icons nil)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** ~cape~
#+begin_src emacs-lisp
(use-package cape
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;; https://github.com/minad/corfu/wiki#continuously-update-the-candidates
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src
** ~vertico~
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :custom
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  (vertico-cycle t)
  :config
  ;; jinx configuration
  (setq vertico-multiform-categories
        '((jinx grid (vertico-grid-annotate . 20))))
  (vertico-multiform-mode 1))
#+end_src
** ~orderless~
#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** ~consult~
#+begin_src emacs-lisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("C-y" . consult-yank-from-kill-ring)
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line))                 ;; required by consult-line to detect isearch
  :general
  ('normal
   "C-c f" #'consult-recent-file)
  ('normal 'override :prefix "g"
           "L" 'consult-line)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
)
#+end_src
*** ~consult-flycheck~
#+begin_src emacs-lisp
(use-package consult-flycheck)
#+end_src
*** ~consult-dir~
#+begin_src emacs-lisp
(use-package consult-dir
  :general
  ("C-x C-d" 'consult-dir)
  (minibuffer-local-completion-map
   "C-x C-d" 'consult-dir
   "C-x C-j" 'consult-dir-jump-file))
#+end_src
** ~marginalia~
#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode))
#+end_src
* Exporting/Publishing
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("plain"
                 "\\documentclass[12pt]{article}

                  \\usepackage[margin=1in]{geometry}
                  \\usepackage{helvet}
                  \\renewcommand\\familydefault\\sfdefault
                  \\renewcommand\\tableofcontents{}

                  \\makeatletter
                  \\renewcommand\\maketitle{ { {\\Large\\@title} \\hfill {\\large\\@author} \\hfill {\\large\\@date} } \\medskip\\hrule\\medskip}
                  \\makeatother"

                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("mla"
                 "\\documentclass{mla}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("apa7"
                 "\\documentclass{apa7}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("scrlttr2"
                 "\\documentclass{scrlttr2}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("scrartcl"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-compiler "pdflatex"
        org-latex-bib-compiler "biber"
        org-latex-image-default-width ".7\\linewidth"
        org-latex-caption-above '(table image)
        org-latex-default-figure-position "H"
        org-latex-pdf-process (list "latexmk --synctex=1 -shell-escape -f -pdf -norc -bibtex %f")
        org-latex-default-class "plain"))
#+end_src
* rss
** ~elfeed~
#+begin_src emacs-lisp
(use-package elfeed
  :general ("C-x w" 'elfeed))
#+end_src
** ~elfeed-org~
#+begin_src emacs-lisp
(use-package elfeed-org
  :custom
  (rmh-elfeed-org-files (list "~/org/elfeed.org"))
  :config (elfeed-org))
#+end_src
** ~elfeed-goodies~
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :after elfeed
  :config (elfeed-goodies/setup))
#+end_src
* secrets
Use ~pass~ emacs interface
#+begin_src emacs-lisp
(use-package pass)
#+end_src

Set ~pass~ as ~auth-sources~ backend
#+begin_src emacs-lisp
(setq auth-sources '(password-store))
#+end_src
* personal finance
hledger
#+begin_src emacs-lisp
(use-package hledger-mode
  :mode ("\\.journal\\'" "\\.hledger\\'")
  :custom
  (ledger-jfile (concat org-directory "/.hledger.journal"))
  :config
  ;; Auto-completion for account names
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'hledger-company)))
#+end_src
